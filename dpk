#!/usr/bin/env bash

# DISPAK
#
# Simple tool to manage code and servers/services easily.
#
# Source code and documentation: https://github.com/Amaury/Dispak
#
# Â© 2017, Amaury Bouchard <amaury@amaury.net>
#
# Licensed under the terms of the MIT license (see LICENSE file).

# ########## GLOBAL VARIABLES (readable by rules' code) ##########

# Path to the Dispak installation root directory.
# @type	string
DPK_ROOT="$(cd "$(dirname "$(readlink "${BASH_SOURCE[0]}" || echo "${BASH_SOURCE[0]}")")" && pwd)"

# List of options given on the command-line.
declare -A DPK_OPT

# Name of the asked command to execute
COMMAND=$1

# Path to the root of the current git repository.
GIT_REPO_PATH="$(git rev-parse --git-dir 2>/dev/null)"
if [ "$GIT_REPO_PATH" != "" ]; then
	GIT_REPO_PATH="$(readlink -f "$(dirname "$GIT_REPO_PATH")")"
fi

# ########## INTERNAL VARIABLES ##########

# Name of the Git's main branch. Defaults to 'main', but more and more repositories are switching to 'main'.
CONF_GIT_MAIN="main"

# List of servers' platform types. Declared here to be fillable in the configuration file. Used by the check_platform() function.
# @type associative array
declare -A CONF_PLATFORMS

# List of rules, indexed by section.
# @type	associative array
declare -A _DPK_RULES

# List of mandatory command-line parameters, indexed by rule.
# @type	associative array
declare -A _DPK_RULES_MANDATORY_PARAMS

# List of optional command-line parameters, indexed by rule.
# @type	associative array
declare -A _DPK_RULES_OPTIONAL_PARAMS

# Tell if the program has changed its current working directory.
# @type	bool
_NEED_POPD=0

# ########## INCLUDE SOURCE FILES ##########
# functions files
. "$DPK_ROOT/lib/utils.sh"
. "$DPK_ROOT/lib/rules.sh"
. "$DPK_ROOT/lib/checks.sh"

# (rules can't be imported from a function, because defined arrays will be not defined)
# import rules from Dispak distribution
for FILE in "$DPK_ROOT"/rules/*.sh ; do
	RULE_NAME=""
	RULE_SECTION=""
	RULE_MANDATORY_PARAMS=""
	RULE_OPTIONAL_PARAMS=""
	. "$FILE"
	if [ "$RULE_NAME" != "" ] && [ "$RULE_NAME" != "help" ]; then
		_dpk_rule_add $RULE_NAME "$RULE_SECTION"
		_dpk_rule_mandatory_params $RULE_NAME $RULE_MANDATORY_PARAMS
		_dpk_rule_optional_params $RULE_NAME $RULE_OPTIONAL_PARAMS
	fi
done
# import rules from repository source tree
if [ -d "$GIT_REPO_PATH/etc/dispak-rules" ]; then
	for FILE in "$GIT_REPO_PATH"/etc/dispak-rules/*.sh ; do
		RULE_NAME=""
		RULE_SECTION=""
		RULE_MANDATORY_PARAMS=""
		RULE_OPTIONAL_PARAMS=""
		. "$FILE"
		if [ "$RULE_NAME" != "" ] && [ "$RULE_NAME" != "help" ]; then
			_dpk_rule_add $RULE_NAME "$RULE_SECTION"
			_dpk_rule_mandatory_params $RULE_NAME $RULE_MANDATORY_PARAMS
			_dpk_rule_optional_params $RULE_NAME $RULE_OPTIONAL_PARAMS
		fi
	done
fi

# ########## READ CONFIGURATIONI FILE ##########
if [ "$GIT_REPO_PATH" != "" ]; then
	if [ -f "$GIT_REPO_PATH/etc/dispak.conf" ]; then
		. "$(eval realpath "$GIT_REPO_PATH/etc/dispak.conf")"
	fi
fi

# ########## OPTIONS AND CONFIGURATION ##########
# no option given: show help and quit
if [ "$COMMAND" = "" ] || [ "$COMMAND" = "h" ] || [ "$COMMAND" = "help" ]; then
	rule_exec_help $2
	exit 0
fi
# fetch command-line options
shift
while getopts "h-:" OPTCHAR; do
	case "$OPTCHAR" in
		"-")
			KEY=$(echo $OPTARG | cut -d"=" -f 1)
			if [[ "${OPTARG}" == *"="* ]]; then
				VALUE="${OPTARG#*=}"
			else
				VALUE=""
			fi
			DPK_OPT[$KEY]="$VALUE"
			;;
		"h")
			rule_exec_help
			exit 1
			;;
		*)
			abort "$(ansi red)Bad command line option '-$OPTCHAR'.$(ansi reset)"
			;;
	esac
done
# check if the asked command is known
CMD_FOUND=0
for _SECTION in "${!_DPK_RULES[@]}"; do
	for _RULE in ${_DPK_RULES["$_SECTION"]}; do
		if [ "$_RULE" = "$COMMAND" ]; then
			CMD_FOUND=1
			break
		fi
	done
done
if [ $CMD_FOUND -eq 0 ]; then
	abort "$(ansi red)Unknown command $(ansi reset)'$COMMAND'$(ansi red).$(ansi reset)"
fi
# check if all mandatory options are given
for _OPT in ${_DPK_RULES_MANDATORY_PARAMS[$COMMAND]}; do
	if [ "${DPK_OPT[$_OPT]}" = "" ]; then
		abort "$(ansi red)Mising parameter $(ansi reset)--$_OPT$(ansi red).$(ansi reset)"
	fi
done
# check if extraneous parameters are given
for _OPT in "${!DPK_OPT[@]}"; do
	if [ "$_OPT" = "platform" ]; then
		continue
	fi
	FOUND=0
	for _KEY in ${_DPK_RULES_MANDATORY_PARAMS[$COMMAND]} ${_DPK_RULES_OPTIONAL_PARAMS[$COMMAND]}; do
		if [ "$_KEY" = "$_OPT" ]; then
			FOUND=1
			break;
		fi
	done
	if [ $FOUND -eq 0 ]; then
		abort "$(ansi red)Extraneous parameter $(ansi reset)--$_OPT$(ansi red).$(ansi reset)"
	fi
done

# ########## EXECUTION ##########
# moving to root path
if [ "$GIT_REPO_PATH" != "" ]; then
	_NEED_POPD=1
	pushd "$GIT_REPO_PATH" > /dev/null
fi
EXEC_FUNCTION="rule_exec_${COMMAND}"
$EXEC_FUNCTION
success

